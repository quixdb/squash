cmake_minimum_required (VERSION 2.8.7)
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

project (squash)

include (CTest)
include (GNUInstallDirs)
include (ExtraWarningFlags)
include (CheckFunctionExists)
include (CheckIncludeFile)
include (AddCompilerFlags)

enable_testing ()

if (ENABLE_COVERAGE STREQUAL "yes")
  include (CodeCoverage)
endif ()

set (PACKAGE_NAME Squash)
set (SQUASH_TOP_SRCDIR "${PROJECT_SOURCE_DIR}")
set (SQUASH_TOP_BUILDDIR "${PROJECT_BINARY_DIR}")

set (SQUASH_VERSION_MAJOR 0)
set (SQUASH_VERSION_MINOR 8)
set (SQUASH_VERSION_REVISION 0)
set (SQUASH_VERSION_API "0.8")
set (PACKAGE_VERSION ${SQUASH_VERSION_MAJOR}.${SQUASH_VERSION_MINOR}.${SQUASH_VERSION_REVISION})

if (NOT EXISTS "${PROJECT_SOURCE_DIR}/squash/tinycthread/source/tinycthread.c")
  message (FATAL_ERROR "It looks like you don't have submodules checked out.
If you are compiling from git, make sure to run `git submodule update --init --recursive' or call autogen.sh, which will invoke that command for you.
If you are compiling from a tarball, make sure you don't use the ones automatically generated by GitHubâ€”they don't include submodules and are, therefore, completely broken.  Official releases are on https://github.com/quixdb/squash/releases and are the ones labeled \"squash-x.y.z.tar.bz2\", not \"Source code\".  GitHub is aware of the issue.")
endif ()

set(CPACK_PACKAGE_VERSION_MAJOR ${SQUASH_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${SQUASH_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${SQUASH_VERSION_REVISION})
set(CPACK_SOURCE_GENERATOR "TBZ2")
set(CPACK_SOURCE_PACKAGE_FILE_NAME
  "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_SOURCE_IGNORE_FILES
  "/autogen.sh;/build/;.git;.gitmodules;.gitignore;~$;${CPACK_SOURCE_IGNORE_FILES}")
include (CPack)

add_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)

include_directories ("${PROJECT_BINARY_DIR}")
include_directories ("${PROJECT_SOURCE_DIR}")

if ("${PLUGIN_DIRECTORY}" STREQUAL "")
  set (PLUGIN_DIRECTORY ${CMAKE_INSTALL_FULL_LIBDIR}/squash/${SQUASH_VERSION_API}/plugins)
endif ()

if ("${SEARCH_PATH}" STREQUAL "")
  set (SEARCH_PATH "${PLUGIN_DIRECTORY}")
endif ()

set (SQUASH_PLUGIN_DIRECTORY "${PLUGIN_DIRECTORY}")
set (SQUASH_SEARCH_PATH "${SEARCH_PATH}")

configure_file (
    "${PROJECT_SOURCE_DIR}/squash.pc.in"
    "${PROJECT_BINARY_DIR}/squash-${SQUASH_VERSION_API}.pc"
    @ONLY)

set (squash_enabled_plugins "" CACHE INTERNAL "enabled plugins" FORCE)

# This only works with gcc/clang at the moment.
function (squash_set_target_visibility target visibility)
  set (flag "-fvisibility=${visibility}")
  string (REGEX REPLACE "[-=]+" "_" abbrev_test_name "${flag}")

  CHECK_C_COMPILER_FLAG ("-fvisibility=${visibility}" "CFLAG_${abbrev_test_name}")
  CHECK_CXX_COMPILER_FLAG ("-fvisibility=${visibility}" "CXXFLAG_${abbrev_test_name}")

  if (CFLAG_${abbrev_test_name})
    target_add_compiler_flags (${target} ${flag})
    set_property (TARGET ${target} APPEND PROPERTY LINKER_FLAGS "${flag}")
  endif ()

  unset (flag)
  unset (abbrev_test_name)
endfunction (squash_set_target_visibility)

if (CMAKE_BUILD_TYPE MATCHES "Release")
  global_add_compiler_flags (-O3 -flto -DNDEBUG)
elseif (NOT ENABLE_COVERAGE STREQUAL "yes")
  global_add_compiler_flags (-g -O2)
endif ()

####
## Compatibility with older CMake
##
## This will probably be removed when Ubuntu bumps their LTS server
## release (and Travis upgrades).
####
if (${CMAKE_VERSION} VERSION_LESS 2.8.11)
  function (target_include_directories)
    foreach (argn RANGE 2 ${ARGC})
      if (${argn} LESS ${ARGC})
        include_directories (${ARGV${argn}})
      endif ()
    endforeach ()
  endfunction ()
endif ()

if (ENABLE_COVERAGE STREQUAL "yes")
  if (CMAKE_BUILD_TYPE MATCHES "Release")
    message (WARNING "Coverage anaysis requires a debugging build")
  endif ()
endif ()

function (squash_target_add_coverage target)
  if (ENABLE_COVERAGE STREQUAL "yes")
    set_property (TARGET ${target} APPEND_STRING PROPERTY COMPILE_FLAGS " -fprofile-arcs")
    set_property (TARGET ${target} APPEND_STRING PROPERTY COMPILE_FLAGS " -ftest-coverage")
    set_property (TARGET ${target} APPEND_STRING PROPERTY LINK_FLAGS " -fprofile-arcs")
    set_property (TARGET ${target} APPEND_STRING PROPERTY LINK_FLAGS " -ftest-coverage")
  endif ()
endfunction (squash_target_add_coverage)

add_subdirectory (squash)
add_subdirectory (plugins)
add_subdirectory (utils)
add_subdirectory (docs)
add_subdirectory (examples)
add_subdirectory (bindings)
add_subdirectory (tests)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/squash-${SQUASH_VERSION_API}.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

if (ENABLE_COVERAGE STREQUAL "yes")
  SETUP_TARGET_FOR_COVERAGE(coverage ctest coverage)
endif ()
